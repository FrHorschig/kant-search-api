openapi: 3.0.0
info:
  title: KantSearch API
  description: An API for the KantSearch backend.
  version: 0.14.4
servers:
  - url: https://localhost:3000/api/v1
paths:
  /volumes:
    get:
      tags:
        - Read
      operationId: getVolumes
      summary: Get the data of all volumes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Volume"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /works:
    post:
      tags:
        - Upload
      operationId: uploadWork
      summary: Post the text of work
      requestBody:
        description: The text to upload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkUpload"
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
    get:
      tags:
        - Read
      operationId: getWorks
      summary: Get the data of all works, the result is sorted by volume and work ordinal
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Work"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /works/{workId}/paragraphs:
    get:
      tags:
        - Read
      operationId: getParagraphs
      summary: Get paragraphs of a the text of a work
      parameters:
        - in: path
          name: workId
          required: true
          schema:
            $ref: "#/components/schemas/ID"
          description: ID of the work
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Paragraph"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /search:
    post:
      tags:
        - Search
      operationId: search
      summary: Post the search criteria
      requestBody:
        description: The search criteria
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCriteria"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  responses:
    BadRequest:
      description: The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, size too large, invalid request message framing, or deceptive request routing).
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpError"
    NotFound:
      description: The requested resource could not be found but may be available in the future.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpError"
    InternalServerError:
      description: A generic error, given when an unexpected condition was encountered and no more specific message is suitable.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpError"
    NotImplemented:
      description: The server either does not recognize the request method, or it lacks the ability to fulfil the request. Usually this implies future availability (e.g., a new feature of a web-service API).
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpError"
  schemas:
    ErrorCode:
      type: integer
      minimum: 100
      maximum: 599
    ErrorMessage:
      type: string
      enum:
        - BAD_REQUEST.GENERIC
        - BAD_REQUEST.INVALID_WORK_SELECTION
        - BAD_REQUEST.INVALID_SEARCH_CRITERIA
        - BAD_REQUEST.EMPTY_WORKS_SELECTION
        - BAD_REQUEST.EMPTY_SEARCH_TERMS
        - BAD_REQUEST.EMPTY_WORK_TEXT
        - BAD_REQUEST.SYNTAX.UNEXPECTED_TOKEN
        - BAD_REQUEST.SYNTAX.UNEXPECTED_END_OF_INPUT
        - BAD_REQUEST.SYNTAX.MISSING_CLOSING_PARENTHESIS
        - BAD_REQUEST.SYNTAX.WRONG_STARTING_CHAR
        - BAD_REQUEST.SYNTAX.WRONG_ENDING_CHAR
        - BAD_REQUEST.SYNTAX.UNTERMINATED_DOUBLE_QUOTE
        - NOT_FOUND.GENERIC
        - NOT_FOUND.VOLUMES
        - NOT_FOUND.WORKS
        - NOT_FOUND.PARAGRAPHS
        - NOT_FOUND.MATCHES
        - INTERNAL_SERVER_ERROR
        - NOT_IMPLEMENTED
    HttpError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          $ref: "#/components/schemas/ErrorCode"
        message:
          $ref: "#/components/schemas/ErrorMessage"
        params:
          type: array
          items:
            type: string
    ID:
      type: integer
      minimum: 0
    Match:
      type: object
      required:
        - snippet
        - text
        - pages
        - paragraphId
      properties:
        snippet:
          type: string
        text:
          type: string
        pages:
          type: array
          items:
            $ref: "#/components/schemas/NaturalNumber"
        paragraphId:
          $ref: "#/components/schemas/ID"
        sentenceId:
          $ref: "#/components/schemas/ID"
    Paragraph:
      type: object
      required:
        - id
        - text
        - pages
        - workId
      properties:
        id:
          $ref: "#/components/schemas/ID"
        text:
          type: string
        pages:
          type: array
          items:
            $ref: "#/components/schemas/NaturalNumber"
        workId:
          $ref: "#/components/schemas/ID"
    SearchCriteria:
      type: object
      required:
        - workIds
        - searchString
        - options
      properties:
        workIds:
          type: array
          items:
            $ref: "#/components/schemas/ID"
        searchString:
          type: string
          maxLength: 1000
        options:
          $ref: "#/components/schemas/SearchOptions"
    SearchOptions:
      type: object
      required:
        - scope
      properties:
        scope:
          $ref: "#/components/schemas/SearchScope"
    SearchResult:
      type: object
      required:
        - workId
        - matches
      properties:
        workId:
          $ref: "#/components/schemas/ID"
        matches:
          type: array
          items:
            $ref: "#/components/schemas/Match"
    SearchScope:
      type: string
      enum:
        - PARAGRAPH
        - SENTENCE
    SyntaxCheckResult:
      type: object
      required:
        - valid
      properties:
        valid:
          type: boolean
        messages:
          type: array
          items:
            type: string
    NaturalNumber:
      type: integer
      minimum: 1
    Volume:
      type: object
      required:
        - id
        - title
        - section
      properties:
        id:
          $ref: "#/components/schemas/VolumeID"
        title:
          type: string
        section:
          $ref: "#/components/schemas/VolumeSection"
    VolumeID:
      type: integer
      minimum: 1
    VolumeSection:
      type: integer
      minimum: 1
    Work:
      type: object
      required:
        - id
        - title
        - ordinal
        - volumeId
      properties:
        id:
          $ref: "#/components/schemas/ID"
        title:
          type: string
        abbreviation:
          type: string
        ordinal:
          description: The position of the work in the volume
          $ref: "#/components/schemas/NaturalNumber"
        year:
          type: string
        volumeId:
          $ref: "#/components/schemas/VolumeID"
    WorkUpload:
      type: object
      required:
        - workId
        - text
      properties:
        workId:
          $ref: "#/components/schemas/ID"
        text:
          type: string
