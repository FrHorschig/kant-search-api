openapi: 3.0.0
info:
  title: KantSearch API
  description: An API for the KantSearch backend.
  version: 0.8.0
servers:
  - url: https://localhost:3000/api/v1
paths:
  /works:
    post:
      tags:
        - Upload
      operationId: uploadWork
      summary: Post the text of work
      requestBody:
        description: The text to upload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkUpload"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkMetadata"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
    get:
      tags:
        - Read
      operationId: getWorks
      summary: Get the data of all works
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkMetadata"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /works/{id}/paragraphs:
    get:
      tags:
        - Read
      operationId: getParagraphs
      summary: Get paragraphs of a the text of a work
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
          description: ID of the work
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Paragraph"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /works/{workId}/paragraphs/{paragraphId}:
    get:
      tags:
        - Read
      operationId: getParagraph
      summary: Get a paragraph of a the text of a work by its ID
      parameters:
        - in: path
          name: workId
          required: true
          schema:
            $ref: "#/components/schemas/WorkID"
          description: ID of the work
        - in: path
          name: paragraphId
          required: true
          schema:
            $ref: "#/components/schemas/ID"
          description: ID of the paragraph
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Paragraph"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /search/paragraphs:
    post:
      tags:
        - Search
      operationId: search
      summary: Post the search criteria
      requestBody:
        description: The search criteria
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCriteria"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  responses:
    BadRequest:
      description: The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, size too large, invalid request message framing, or deceptive request routing).
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpError"
    NotFound:
      description: The requested resource could not be found but may be available in the future.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpError"
    Conflict:
      description: Indicates that the request could not be processed because of conflict in the current state of the resource, such as an edit conflict between multiple simultaneous updates.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpError"
    InternalServerError:
      description: A generic error, given when an unexpected condition was encountered and no more specific message is suitable.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpError"
  schemas:
    ErrorCode:
      type: integer
      minimum: 100
      maximum: 599
    HttpError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          $ref: "#/components/schemas/ErrorCode"
        message:
          type: string
    ID:
      type: integer
      minimum: 0
    Match:
      type: object
      required:
        - snippet
        - pages
        - elementId
      properties:
        snippet:
          type: string
        pages:
          type: array
          items:
            $ref: "#/components/schemas/NaturalNumber"
        elementId:
          description: The ID of the matched paragraph or sentence
          $ref: "#/components/schemas/ID"
    Paragraph:
      type: object
      required:
        - id
        - text
        - pages
        - workId
      properties:
        id:
          $ref: "#/components/schemas/ID"
        text:
          type: string
        pages:
          type: array
          items:
            $ref: "#/components/schemas/NaturalNumber"
        workId:
          $ref: "#/components/schemas/WorkID"
    SearchCriteria:
      type: object
      required:
        - searchTerms
        - workIds
      properties:
        searchTerms:
          type: array
          items:
            type: string
        workIds:
          type: array
          items:
            $ref: "#/components/schemas/WorkID"
        scope:
          $ref: "#/components/schemas/SearchScope"
    SearchResult:
      type: object
      required:
        - workId
        - matches
      properties:
        workId:
          $ref: "#/components/schemas/WorkID"
        matches:
          type: array
          items:
            $ref: "#/components/schemas/Match"
    SearchScope:
      type: string
      enum:
        - paragraph
        - sentence
    NaturalNumber:
      type: integer
      minimum: 1
    WorkID:
      type: string
    WorkMetadata:
      type: object
      required:
        - title
        - volume
        - ordinal
      properties:
        id:
          $ref: "#/components/schemas/WorkID"
        title:
          type: string
        volume:
          $ref: "#/components/schemas/NaturalNumber"
        ordinal:
          description: The position of the work in the volume
          $ref: "#/components/schemas/NaturalNumber"
        year:
          $ref: "#/components/schemas/Year"
    WorkUpload:
      type: object
      required:
        - workId
        - text
      properties:
        workId:
          $ref: "#/components/schemas/WorkID"
        text:
          type: string
    Year:
      type: integer
      minimum: -999
      maximum: 9999
