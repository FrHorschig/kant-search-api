openapi: 3.0.0
info:
  title: KantSearch API
  description: An API for the KantSearch backend.
  version: 0.16.1
servers:
  - url: https://localhost:3000/api/v1
tags:
  - name: Read
    description: operations to load full texts
  - name: Search
    description: operations for searching
  - name: Upload
    description: operations for text upload
paths:
  /volumes:
    get:
      tags:
        - Read
      operationId: getVolumes
      summary: Get the data of all volumes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Volume"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /works:
    get:
      tags:
        - Read
      operationId: getWorks
      summary: Get the data of all works
      responses:
        "200":
          description: Returns the data of all works sorted by volume and work ordinal
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Work"
        "204":
          description: The server successfully processed the request, and is not returning any content.
        "500":
          $ref: "#/components/responses/InternalServerError"
  /works/{workId}:
    post:
      tags:
        - Upload
      operationId: uploadWork
      summary: Post the text of a work
      parameters:
        - in: path
          name: workId
          required: true
          schema:
            $ref: "#/components/schemas/ID"
          description: ID of the work
      requestBody:
        description: The text to upload in XML format
        required: true
        content:
          # TODO frhorschig: check if XML will be used
          application/xml:
            schema:
              type: string
              format: xml
      responses:
        "202":
          description: Accepted, processing of the text is done asynchronously
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /works/{workId}/paragraphs:
    get:
      tags:
        - Read
      operationId: getParagraphs
      summary: Get the text of a work in paragraphs
      parameters:
        - in: path
          name: workId
          required: true
          schema:
            $ref: "#/components/schemas/ID"
          description: ID of the work
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Paragraph"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /search:
    post:
      tags:
        - Search
      operationId: search
      summary: Post the search criteria
      requestBody:
        description: The search criteria
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCriteria"
      responses:
        "200":
          description: Returns the search results, the array is empty if no result is found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  responses:
    BadRequest:
      description: The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, size too large, invalid request message framing, or deceptive request routing).
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpError"
    NotFound:
      description: The requested resource could not be found but may be available in the future.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpError"
    InternalServerError:
      description: A generic error, given when an unexpected condition was encountered and no more specific message is suitable.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpError"
  schemas:
    ErrorCode:
      type: integer
      minimum: 400
      maximum: 599
    ErrorMessage:
      type: string
      # TODO frhorschig: adjust when rewriting text processing
      enum:
        - BAD_REQUEST.GENERIC
        - BAD_REQUEST.INVALID_WORK_SELECTION
        - BAD_REQUEST.INVALID_SEARCH_CRITERIA
        - BAD_REQUEST.EMPTY_WORKS_SELECTION
        - BAD_REQUEST.EMPTY_SEARCH_TERMS
        - BAD_REQUEST.EMPTY_WORK_TEXT
        - BAD_REQUEST.COMMON.WRONG_STARTING_CHAR
        - BAD_REQUEST.SYNTAX.UNEXPECTED_TOKEN
        - BAD_REQUEST.SYNTAX.UNEXPECTED_END_OF_INPUT
        - BAD_REQUEST.SYNTAX.MISSING_CLOSING_PARENTHESIS
        - BAD_REQUEST.SYNTAX.WRONG_ENDING_CHAR
        - BAD_REQUEST.SYNTAX.UNTERMINATED_DOUBLE_QUOTE
        - BAD_REQUEST.UPLOAD.MISSING_EXPR_TYPE
        - BAD_REQUEST.UPLOAD.MISSING_CLOSING_BRACE
        - BAD_REQUEST.UPLOAD.WRONG_START_EXPRESSION
        - BAD_REQUEST.UPLOAD.WRONG_END_EXPRESSION
        - BAD_REQUEST.UPLOAD.UNKNOWN_EXPRESSION_CLASS
        - NOT_FOUND.GENERIC
        - NOT_FOUND.VOLUMES
        - NOT_FOUND.WORKS
        - NOT_FOUND.PARAGRAPHS
        - NOT_FOUND.MATCHES
        - INTERNAL_SERVER_ERROR
        - NOT_IMPLEMENTED
    HeadingLevel:
      type: integer
      minimum: 1
      maximum: 6
    HttpError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          $ref: "#/components/schemas/ErrorCode"
        message:
          $ref: "#/components/schemas/ErrorMessage"
        params:
          type: array
          items:
            type: string
    ID:
      type: integer
      minimum: 0
    Match:
      type: object
      required:
        - snippet
        - text
        - pages
        - paragraphId
      properties:
        snippet:
          type: string
        text:
          type: string
        pages:
          type: array
          items:
            $ref: "#/components/schemas/NaturalNumber"
        paragraphId:
          $ref: "#/components/schemas/ID"
        sentenceId:
          $ref: "#/components/schemas/ID"
    NaturalNumber:
      type: integer
      minimum: 1
    Paragraph:
      type: object
      required:
        - id
        - text
        - pages
        - workId
      properties:
        id:
          $ref: "#/components/schemas/ID"
        text:
          type: string
        pages:
          type: array
          items:
            $ref: "#/components/schemas/NaturalNumber"
        workId:
          $ref: "#/components/schemas/ID"
        headingLevel:
          $ref: "#/components/schemas/HeadingLevel"
        footnoteName:
          type: string
    SearchCriteria:
      type: object
      required:
        - workIds
        - searchString
        - options
      properties:
        workIds:
          type: array
          items:
            $ref: "#/components/schemas/ID"
        searchString:
          type: string
          maxLength: 1000
        options:
          $ref: "#/components/schemas/SearchOptions"
    SearchOptions:
      type: object
      required:
        - scope
      properties:
        scope:
          $ref: "#/components/schemas/SearchScope"
    SearchResult:
      type: object
      required:
        - workId
        - matches
      properties:
        workId:
          $ref: "#/components/schemas/ID"
        matches:
          type: array
          items:
            $ref: "#/components/schemas/Match"
    SearchScope:
      type: string
      enum:
        - PARAGRAPH
        - SENTENCE
    Volume:
      type: object
      required:
        - id
        - section
      properties:
        id:
          $ref: "#/components/schemas/VolumeID"
        section:
          $ref: "#/components/schemas/VolumeSection"
    VolumeID:
      type: integer
      minimum: 1
      maximum: 23
    VolumeSection:
      type: integer
      minimum: 1
      maximum: 3
    Work:
      type: object
      required:
        - id
        - code
        - ordinal
        - volumeId
      properties:
        id:
          $ref: "#/components/schemas/ID"
        code:
          type: string
        abbreviation:
          type: string
        ordinal:
          $ref: "#/components/schemas/NaturalNumber"
        year:
          type: string
        volumeId:
          $ref: "#/components/schemas/VolumeID"
